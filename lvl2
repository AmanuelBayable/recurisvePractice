//input string
//output reverse of the string

function reverse(str) {
  if (str.length === 1) {
    return str[0]
  }
  return reverse(str.slice(1)) + str[0];
}

//input string
// t/f if palindrome

function isPalindrome(str) {
  if (str.length === 1) {
    return console.log("t");
    true
  };
  if (str.length === 2) {
    if (str[0] === str[1]) {
      console.log("t");
    }
  };
  if (str[0] === str.slice(-1)) {
    return isPalindrome(str.slice(1, -1))
  };
  console.log("f");
  return false;
}

//input arr and function
//output returns true if one value returns true fro callback

function someRecursion(arr, cback) {
  if (arr.length === 0) return false;
  if (cback(arr[0])) return true;
  return someRecursion(arr.slice(1), cback);
}

//input arr of arrays 
//output all values flattend

function flatten(arr) {
  var newArr = [];
  for (var x = 0; x < arr.length; x++) {
    if (Array.isArray(arr[x])) {
      flatten(arr[x]);
    } else {
      newArr.push();
    }
  }
}

//input arr of strings
//output captilize the first letter of each string in the array

function capitalizeFirst(arr) {
  if (arr.length === 1) {
    return [arr[0][0].toUpperCase() + arr[0].substr(1)];
  }
  const res = capitalizeFirst(arr.slice(0, -1));
  const string = arr.slice(arr.length - 1)[0][0].toUpperCase() + arr.slice(arr.length - 1)[0].substr(1);
  res.push(string);
  return res;
}

//input array of words
//output letter capitalized array of words

function capitalizeWords(arr) {
  if (arr.length === 1) {
    return ([arr[0].toUpperCase()]);
  } else {
    var res = capitalizeWords(arr.slice(0, -1));
    res.push(arr[arr.length - 1].toUpperCase());
  }
  return res;
}

//return sum of all even numbers in an obj which may have nested objects
//input obj
//output sum of all even numbers within the obj and obj with the obj

function nestedEvenSum(obj, sum = 0) {
  for (var key in obj) {
    if (typeof obj[key] === 'object') {
      sum += nestedEvenSum(obj[key]);
    } else if (typeof obj[key] === 'number' && obj[key] % 2 === 0) {
      sum += obj[key];
    }
  }
  return sum;
}

//strigify
//input object that contains obj and numbers
//output all the num as srings

function stringifyNumbers(obj){
  var newObj = {};
  for (var x in obj){
    if (typeof obj[x] === "number"){
      newObj[x] = obj[x].toString();
    }
    else if (typeof obj[x] === "object" && !Array.isArray(obj[x])){
      newObj[x] = stringifyNumbers(obj[x]);
    }
    else {
      newObj[x] = obj[x];
    }
  }
  return newObj;
}

//input obj
//output arr of all the strings withing the obj

//helper recurse
function stirng1(obj) {
  var arr = [];
  function gather(o){
    for (x in o){
      if (typeof o[x] === "string") {
        arr.push(o[x]);
      }
      else if (typeof o[x] === "object"){
        gather(o[x]);
      }
    }
  }
  gather(obj);
  return arr;
}

//pure recurse
function collectStrings(obj) {
  var stringsArr = [];
  for(var key in obj) {
      if(typeof obj[key] === 'string') {
          stringsArr.push(obj[key]);
      }
      else if(typeof obj[key] === 'object') {
          stringsArr = stringsArr.concat(collectStrings(obj[key]));
      }
  }

  return stringsArr;
}
